#!/usr/bin/php
<?php
// ? create-project installation : require installation
$vendor_dir = is_dir(dirname(dirname((__FILE__))).'/vendor') ? dirname(dirname((__FILE__))).'/vendor' : dirname(dirname(dirname(dirname(__FILE__))));
require $vendor_dir.'/autoload.php';

use wapmorgan\PhpCodeFixer\IssuesBank;
use wapmorgan\PhpCodeFixer\PhpCodeFixer;


$doc = <<<DOC
Usage: phpcf [--target VERSION]  [FILES ...]

Options:
  --target VERSION  target php version [default: 5.6]

DOC;

$args = Docopt::handle($doc);

$available_versions = array('5.3', '5.4', '5.5', '5.6', '7.0-experimental');

if (!in_array($args['--target'], $available_versions, true)) {
    fwrite(STDERR, 'Target version is not valid.');
    exit();
}

// init issues bank
$issues = new IssuesBank();
foreach ($available_versions as $version) {
    $version_issues = include dirname(dirname(__FILE__)).'/data/'.(strpos($version, '-') !== false ? strstr($version, '-', true) : $version).'.php';

    foreach ($version_issues as $issues_type => $issues_list) {
        $issues->import($version, $issues_type, $issues_list);
    }

    if ($version == $args['--target'])
        break;
}

foreach ($args['FILES'] as $file) {
    if (is_dir($file)) {
        PhpCodeFixer::checkDir($file, $issues);
    } else {
        PhpCodeFixer::checkFile($file, $issues);
    }
}

/**
 * @param string format Sets format for size.
 * In format following macroses are available:
 * - %.@
 */
function size_format($bytes, $precision = 2) {
    $units = array('B', 'KB', 'MB', 'GB', 'TB', 'PB');

    $bytes = max($bytes, 0);
    $pow = floor(($bytes ? log($bytes) : 0) / log(1024));
    $pow = min($pow, count($units) - 1);

    $bytes /= pow(1024, $pow);

    return round($bytes, $precision) . ' ' . $units[$pow];
}

echo 'Peak memory usage: '.size_format(memory_get_peak_usage());